node{

        stage ('Generate Build Version') {
                echo 'Generating Provar Version...{Major.Minor.Build.Revision}'
                ${BUILDS_ALL_TIME} = '00'
                env.BUILD_NUMBER = VersionNumber([
                        versionNumberString :'${MAJOR.MINOR.BUILD}.${BUILDS_ALL_TIME,XX}', 
                        projectStartDate : '2018-11-11', 
                        versionPrefix : ''
                ])
                println 'Provar Build Version Created: ' + env.BUILD_NUMBER
        }
        
        stage ('Git Checkout') {
                withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: 'ProvarGitCredentials',
                    usernameVariable: 'USERNAME', passwordVariable: 'PASSWORD']]) {
                    bat '''
                        C:
                        cd C:/Users/Administrator/git/Provar
                        
                        echo 'Resetting release branch: release-v%MAJOR.MINOR.BUILD%'
                        git reset --hard release-v%MAJOR.MINOR.BUILD%
                        
                        echo 'Pulling Provar repo'
                        git pull "https://%USERNAME%:%PASSWORD%@github.com/pnoffke/Provar.git" release-v%MAJOR.MINOR.BUILD%
                        
                        cd C:/Users/Administrator/git/ProvarSF
                        
                        echo 'Resetting release branch: release-v%MAJOR.MINOR.BUILD%'
                        git reset --hard release-v%MAJOR.MINOR.BUILD%
                        
                        echo 'Pulling ProvarSF repo'
                        git pull "https://%USERNAME%:%PASSWORD%@github.com/pnoffke/ProvarSF.git" release-v%MAJOR.MINOR.BUILD%
                        
                        '''
                }
        }
        
        stage ('Update Versions') {
                echo 'Updating versions'
                
                bat '''
                        C:
                        cd %ECLIPSE.LOCATION%
                        
                        eclipsec -nosplash -application org.eclipse.ant.core.antRunner -Dbuild.version=%BUILD_NUMBER% -Dforcedotcom.apis=%FORCEDOTCOM.APIS% -Dforcedotcom.ui=%FORCEDOTCOM.UI% -Dforcedotcom.feature=%FORCEDOTCOM.FEATURE% -f %PROVAR_BUILD_SCRIPT_PATH%/ant-version-update.xml update-build-version
                        eclipsec -nosplash -application org.eclipse.ant.core.antRunner -Dbuild.version=%BUILD_NUMBER% -Dforcedotcom.apis=%FORCEDOTCOM.APIS% -Dforcedotcom.ui=%FORCEDOTCOM.UI% -Dforcedotcom.feature=%FORCEDOTCOM.FEATURE% -f %PROVAR_BUILD_SCRIPT_PATH%/ant-version-update.xml update-versions-pom
                        eclipsec -nosplash -application org.eclipse.ant.core.antRunner -Dbuild.version=%BUILD_NUMBER% -Dforcedotcom.apis=%FORCEDOTCOM.APIS% -Dforcedotcom.ui=%FORCEDOTCOM.UI% -Dforcedotcom.feature=%FORCEDOTCOM.FEATURE% -f %PROVAR_BUILD_SCRIPT_PATH%/ant-version-update.xml update-versions-manifest
                        
                        
                        
                '''
                try {
                        bat '''
                                C:
                                cd %ECLIPSE.LOCATION%
                                eclipsec.exe -nosplash -clean -application org.eclipse.cdt.managedbuilder.core.headlessbuild --launcher.suppressErrors -data "C:/Provar-Workspace" -cleanBuild all
                        '''
                } catch (exc) {
                        echo 'TODO: doing clean build in eclipse headless mode, via CDT plugin, build project successfully but throws exit code 1, this need to '
                }
        }
       
        stage ('Tyco Build') {
                echo 'Building provar'
                bat '''
                        C:
                        cd C:/Users/Administrator/git/Provar/Java/com.provar.build
                        mvn clean install -Declipse.install.loc=%ECLIPSE.LOCATION%
                '''
        }
        
        stage ('Trigger Smoke Test') {
                build job: 'SmokeTest', 
                    parameters: [
                            [$class: 'StringParameterValue', name: 'provar.home', value: '%PROVAR.HOME%'],
                            [$class: 'StringParameterValue', name: 'testproject.home', tag: '%TESTPROJECT.HOME%'],
                            [$class: 'StringParameterValue', name: 'testproject.results', value: '%TESTPROJECT.RESULTS%'],
                            [$class: 'StringParameterValue', name: 'ant.provar.jar', tag: '%ANT.PROVAR.JAR%'],
                            [$class: 'StringParameterValue', name: 'ant.provar.bundled.jar', value: '%ANT.PROVAR.BUNDLED.JAR%'],
                            [$class: 'StringParameterValue', name: 'ant.provar.sf.jar', value: '%ANT.PROVAR.SF.JAR%']
                    ]
        }
        
        stage ('Generate Installers') {
                echo 'Creating installers for provar'
                bat '''
                        C:
                        cd %NISI.COMPILER%
                        makensis.exe C:/Users/Administrator/git/Installer/NSIS/provar_setup_win_x86_32.nsi
                        makensis.exe C:/Users/Administrator/git/Installer/NSIS/provar_setup_win_x86_64.nsi
                '''
        }
}
